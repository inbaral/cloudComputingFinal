name: assignment3
on: push
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Log the time the workflow starts executing
        run: echo $(date -Iminutes) >> log.txt
      - name: Log Submitters names
        run: echo Inbar Alfasi, Ofek Basson >> log.txt
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Build and export
        uses: docker/build-push-action@v5
        with:
          context: ./books-service
          file: ./books-service/Dockerfile
          tags: books-service:latest
          outputs: type=docker, dest=/tmp/image.tar
      - name: Log successful build
        if: success()
        run: echo image successfully built >> log.txt
      - name: Log unsuccessful build
        if: failure()
        run: echo image not able to be built >> log.txt        
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: books-service
          path: /tmp/image.tar
          overwrite: true
      - name: Upload log file
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: log
          path: log.txt
  test:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Download image artifact
        uses: actions/download-artifact@v4
        with:
          name: books-service
          path: /tmp
      - name: Load image
        run: docker load --input /tmp/image.tar
      - name: Download log file
        uses: actions/download-artifact@v4
        with:
          name: log
          path: .
      - name: Set up python
        uses: actions/setup-python@v5
      - name: Run images in containers using docker-compose
        run: docker-compose up -d
      - name: Log successful containers start
        if: success()
        run: |
          echo Container up and running >> log.txt
          echo "true" > container_status.txt
      - name: Log unsuccessful containers start
        if: failure()
        run: |
          echo Container failed to run >> log.txt  
          echo "false" > container_status.txt
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pytest
          pip install requests
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
      - name: Test with pytest
        run: |
          cd tests
          pytest -v assn3_tests.py >> assn3_test_results.txt
      # TODO: Remove
      - name: Print container_status.txt for debugging
        run: cat container_status.txt for debugging
      # TODO: Remove
      - name: Print steps.run_container.outputs.container_status
        run: cat steps.run_container.outputs.container_status
      # TODO: Remove
      - name: Print steps.run_container.outputs.container_status == 'true'
        run: cat steps.run_container.outputs.container_status == 'true'
      - name: Log successful tests results
        if: steps.run_container.outputs.container_status == 'true' && success()
        run: echo tests succeeded >> log.txt
      - name: Log unsuccessful tests results
        if: steps.run_container.outputs.container_status == 'true' && failure()
        run: echo tests failed >> log.txt  
      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: assn3_test_results
          path: tests/assn3_test_results.txt
      - name: Upload log file
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: log
          path: log.txt
          overwrite: true
  query:
    runs-on: ubuntu-latest
    needs: [build, test]
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Download image artifact
        uses: actions/download-artifact@v4
        with:
          name: books-service
          path: /tmp
      - name: Load image
        run: docker load --input /tmp/image.tar
      - name: Set up python
        uses: actions/setup-python@v5
      - name: Run images in containers using docker-compose
        run: docker-compose up -d
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pytest
          pip install requests
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
      - name: Execute POST requests
        run: | 
          curl -X POST http://localhost:5001/books -H "Content-Type: application/json" -d '{"title":"Adventures of Huckleberry Finn", "ISBN":"9780520343641", "genre":"Fiction"}'
          curl -X POST http://localhost:5001/books -H "Content-Type: application/json" -d '{"title":"The Best of Isaac Asimov", "ISBN":"9780385050784", "genre":"Science Fiction"}'
          curl -X POST http://localhost:5001/books -H "Content-Type: application/json" -d '{"title":"Fear No Evil", "ISBN":"9780394558783", "genre":"Biography"}'
          curl -X POST http://localhost:5001/books -H "Content-Type: application/json" -d '{"title":"The Adventures of Tom Sawyer", "ISBN":"9780195810400", "genre":"Fiction"}'
          curl -X POST http://localhost:5001/books -H "Content-Type: application/json" -d '{"title": "I, Robot", "ISBN":"9780553294385", "genre":"Science Fiction"}'
          curl -X POST http://localhost:5001/books -H "Content-Type: application/json" -d '{"title": "Second Foundation", "ISBN":"9780553293364", "genre":"Science Fiction"}'
      - name: Execute requests from query.txt
        run: |
          touch response.txt
          while read querystring; do
            response=$(curl -s -w "\n%{http_code}" "http://localhost:5001/books$querystring")
            body=$(echo "$response" | head -n -1)
            status_code=$(echo "$response" | tail -n 1)
            if [ "$status_code" -eq 200 ]; then
              echo "query: $querystring" >> response.txt
              echo "response: $body" >> response.txt
            else
              echo "query: $querystring" >> response.txt
              echo "error $status_code" >> response.txt
            fi
          done < query.txt
      - name: Upload response file
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: response
          path: response.txt